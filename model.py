import pandas as pd
import shap
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, roc_auc_score, roc_curve

def run_prediction(df):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ò–∑–º–µ–Ω—è–µ–º '√Ç¬∞C' –Ω–∞ '¬∞C' –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏.
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ Excel —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 'Pack Outlet Temp (¬∞C)'.
    df["dTemp"] = df["Pack Outlet Temp (¬∞C)"].diff().fillna(0)
    df["Temp_MA10"] = df["Pack Outlet Temp (¬∞C)"].rolling(window=10).mean().fillna(method="bfill")
    # fillna(0) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ NaN, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–µ –ø–æ—Å–ª–µ .rolling() –∏ .apply()
    df["Valve_range_10"] = df["Valve Position (%)"].rolling(window=10).apply(lambda x: max(x) - min(x), raw=False).fillna(0)

    features = [
        "Pack Outlet Temp (¬∞C)", # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        "Fan Speed (rpm)",
        "Temp Deviation (¬∞C)",   # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        "Valve Position (%)",
        "Bleed Air Pressure (psi)",
        "dTemp",
        "Temp_MA10",
        "Valve_range_10"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º DataFrame
    missing_features = [col for col in features if col not in df.columns]
    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    if "Failure in 10h" not in df.columns:
        missing_features.append("Failure in 10h")

    if missing_features:
        # –ï—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã Streamlit –º–æ–≥ –µ–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å
        status = f"üî¥ –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ: {', '.join(missing_features)}. " \
                 f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª `ecs_data.xlsx` —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∏–≥—É—Ä—ã –∏ DataFrame, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –≤ app.py
        # –î–æ–±–∞–≤–ª–µ–Ω–æ plt.figure() –¥–ª—è fig_shap, —á—Ç–æ–±—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ app.py
        return pd.DataFrame(), plt.figure(), plt.figure(), plt.figure(), status, plt.figure()

    X = df[features]
    y = df["Failure in 10h"]

    # *** –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò SHAP: –û–±—Ä–∞–±–æ—Ç–∫–∞ NaN –≤ X –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º –∏ SHAP ***
    # –ú–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ SHAP –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (NaN).
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ NaN –Ω—É–ª—è–º–∏. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –∏–º–ø—É—Ç–∞—Ü–∏—è.
    X = X.fillna(0) 

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `y` –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–∞ –∫–ª–∞—Å—Å–∞ (0 –∏ 1)
    # –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Å—Ç—Ä–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    if len(y.unique()) < 2:
        status = "üî¥ –û—à–∏–±–∫–∞: –ö–æ–ª–æ–Ω–∫–∞ 'Failure in 10h' –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0 –∏ 1) " \
                 "–¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏. –¢–µ–∫—É—â–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: " + str(y.unique())
        return pd.DataFrame(), plt.figure(), plt.figure(), plt.figure(), status, plt.figure()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è train_test_split –ø–æ—Å–ª–µ —Å—Ç—Ä–∞—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    # –ï—Å–ª–∏ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–ª–∞—Å—Å –∏–º–µ–µ—Ç –º–µ–Ω–µ–µ 2 —Å—ç–º–ø–ª–æ–≤, `stratify=y` –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É.
    unique_classes, counts = y.value_counts().index, y.value_counts().values
    if any(count < 2 for count in counts):
         status = "üî¥ –û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—ç–º–ø–ª–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ –∫–ª–∞—Å—Å–æ–≤ –≤ –∫–æ–ª–æ–Ω–∫–µ 'Failure in 10h' " \
                  "–¥–ª—è —Å—Ç—Ä–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –º–µ–Ω–µ–µ 2 –∑–∞–ø–∏—Å–µ–π."
         return pd.DataFrame(), plt.figure(), plt.figure(), plt.figure(), status, plt.figure()

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, stratify=y, random_state=42
    )

    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ RandomForestClassifier
    model = RandomForestClassifier(
        n_estimators=200,
        max_depth=6,
        class_weight='balanced_subsample',
        random_state=42
    )
    model.fit(X_train, y_train)

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
    y_pred = model.predict(X_test)
    y_proba = model.predict_proba(X_test)[:, 1]
    roc_auc = roc_auc_score(y_test, y_proba)
    fpr, tpr, _ = roc_curve(y_test, y_proba)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ ROC-–∫—Ä–∏–≤–æ–π
    fig_roc, ax = plt.subplots(figsize=(8, 6))
    ax.plot(fpr, tpr, label=f"AUC = {roc_auc:.2f}")
    ax.plot([0, 1], [0, 1], linestyle="--", color="gray", alpha=0.7)
    ax.set_title("ROC-–∫—Ä–∏–≤–∞—è", fontsize=14)
    ax.set_xlabel("False Positive Rate", fontsize=12)
    ax.set_ylabel("True Positive Rate", fontsize=12)
    ax.legend(fontsize=10)
    ax.grid(True, linestyle='--', alpha=0.6)
    fig_roc.tight_layout() # –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ SHAP-–≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    explainer = shap.TreeExplainer(model)
    # –†–∞—Å—á–µ—Ç SHAP-–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏
    # shap_values[1] —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∞ "1" (–æ—Ç–∫–∞–∑)
    shap_values = explainer.shap_values(X_test) 
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É –¥–ª—è SHAP-–≥—Ä–∞—Ñ–∏–∫–∞
    fig_shap, ax_shap = plt.subplots(figsize=(10, 7))
    # –ü–µ—Ä–µ–¥–∞–µ–º axis –≤ shap.summary_plot, —á—Ç–æ–±—ã –æ–Ω —Ä–∏—Å–æ–≤–∞–ª –Ω–∞ –Ω–∞—à–µ–π —Ñ–∏–≥—É—Ä–µ.
    # X_test –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ DataFrame –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.
    shap.summary_plot(shap_values[1], X_test, plot_type="bar", show=False, ax=ax_shap)
    ax_shap.set_title("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (SHAP Values)", fontsize=14)
    fig_shap.tight_layout() # –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω—ã–π DataFrame
    # –í–∞–∂–Ω–æ: –ò—Å–ø–æ–ª—å–∑—É–µ–º DataFrame `X` (–∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω fillna(0)) –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    df["Predicted Failure"] = model.predict(X)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã PACK —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –æ—Ç–∫–∞–∑–∞–º–∏
    fig_temp, ax2 = plt.subplots(figsize=(12, 6))
    ax2.plot(df["Pack Outlet Temp (¬∞C)"].reset_index(drop=True), label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ PACK", color="blue", linewidth=1.5)
    ax2.scatter(df[df["Predicted Failure"] == 1].index,
                df.loc[df["Predicted Failure"] == 1, "Pack Outlet Temp (¬∞C)"],
                color="red", label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω –æ—Ç–∫–∞–∑", s=50, zorder=5, alpha=0.7) 
    ax2.set_title("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ PACK —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –æ—Ç–∫–∞–∑–∞–º–∏", fontsize=14)
    ax2.set_xlabel("–¢–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö", fontsize=12)
    ax2.set_ylabel("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ PACK (¬∞C)", fontsize=12)
    ax2.grid(True, linestyle='--', alpha=0.6)
    ax2.legend(fontsize=10)
    fig_temp.tight_layout()

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã PACK —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –æ—Ç–∫–∞–∑–∞–º–∏
    fig_dtemp, ax3 = plt.subplots(figsize=(12, 6))
    ax3.plot(df["dTemp"].reset_index(drop=True), label="–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (dTemp)", color="orange", linewidth=1.5)
    ax3.scatter(df[df["Predicted Failure"] == 1].index,
                df.loc[df["Predicted Failure"] == 1, "dTemp"],
                color="red", label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω –æ—Ç–∫–∞–∑", s=50, zorder=5, alpha=0.7)
    ax3.set_title("–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã PACK —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –æ—Ç–∫–∞–∑–∞–º–∏", fontsize=14)
    ax3.set_xlabel("–¢–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö", fontsize=12)
    ax3.set_ylabel("dTemp (¬∞C/—Ç–æ—á–∫–∞)", fontsize=12)
    ax3.grid(True, linestyle='--', alpha=0.6)
    ax3.legend(fontsize=10)
    fig_dtemp.tight_layout()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è
    total_failures = df["Predicted Failure"].sum()
    max_dtemp = df["dTemp"].abs().max()
    dtemp_threshold = 3

    if total_failures > 3:
        status = "üî¥ –ù–µ–æ–±—Ö–æ–¥–∏–º —Ä–µ–º–æ–Ω—Ç –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä."
    elif total_failures > 0 or max_dtemp > dtemp_threshold:
        status = "üü° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å–∏—Å—Ç–µ–º–æ–π."
    else:
        status = "üü¢ –°–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ."

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π DataFrame, –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Ñ–∏–≥—É—Ä Matplotlib –∏ —Å—Ç–∞—Ç—É—Å
    return df, fig_roc, fig_temp, fig_dtemp, status, fig_shap
