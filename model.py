import pandas as pd
import shap
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, roc_auc_score, roc_curve

def run_prediction(df):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º .copy() –¥–ª—è df, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å SettingWithCopyWarning
    df_processed = df.copy() 
    df_processed.rename(columns={
        "Pack Outlet Temp (√Ç¬∞C)": "Pack Outlet Temp (¬∞C)", # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        "Fan Speed": "Fan Speed (rpm)",
        "Temperature Deviation": "Temp Deviation (¬∞C)", # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        "Valve Position": "Valve Position (%)",
        "Bleed Pressure": "Bleed Air Pressure (psi)",
        "Failure": "Failure in 10h" # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ "Failure"
    }, inplace=True)

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç Temp Deviation, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    if "Temp Deviation (¬∞C)" not in df_processed.columns and \
       "Cabin Temp Setpoint (¬∞C)" in df_processed.columns and \
       "Cabin Actual Temp (¬∞C)" in df_processed.columns:
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –≥—Ä–∞–¥—É—Å–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ Excel.
        df_processed["Temp Deviation (¬∞C)"] = df_processed["Cabin Temp Setpoint (¬∞C)"] - df_processed["Cabin Actual Temp (¬∞C)"]

    df = df_processed # –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º DataFrame

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫, –≤–∫–ª—é—á–∞—è —Ç–µ, —á—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã
    required_core_columns = [
        "Pack Outlet Temp (¬∞C)", "Fan Speed (rpm)", "Temp Deviation (¬∞C)",
        "Valve Position (%)", "Bleed Air Pressure (psi)", "Failure in 10h"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º DataFrame
    missing_columns_initial = [col for col in required_core_columns if col not in df.columns]

    if missing_columns_initial:
        status_messages = []
        if "Temp Deviation (¬∞C)" in missing_columns_initial:
            status_messages.append(
                "‚ùå –ö–æ–ª–æ–Ω–∫–∞ 'Temp Deviation (¬∞C)' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. "
                "–û–±–µ—Å–ø–µ—á—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ 'Temperature Deviation' (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ) "
                "–ò–õ–ò –æ–±–µ–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ 'Cabin Temp Setpoint (¬∞C)' –∏ 'Cabin Actual Temp (¬∞C)' –≤ –≤–∞—à–µ–º Excel-—Ñ–∞–π–ª–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞."
            )
            # –£–¥–∞–ª—è–µ–º Temp Deviation –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            missing_columns_initial.remove("Temp Deviation (¬∞C)") 
        
        if missing_columns_initial: 
            status_messages.append(
                f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns_initial)}. "
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª `ecs_data.xlsx` —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∏–≥—É—Ä—ã –∏ DataFrame –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã app.py
        return pd.DataFrame(), plt.figure(), plt.figure(), plt.figure(), "\n".join(status_messages), plt.figure()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    df["dTemp"] = df["Pack Outlet Temp (¬∞C)"].diff().fillna(0)
    df["Temp_MA10"] = df["Pack Outlet Temp (¬∞C)"].rolling(window=10).mean().bfill()
    df["Valve_range_10"] = df["Valve Position (%)"].rolling(window=10).apply(lambda x: max(x) - min(x), raw=False).fillna(0)

    features = [
        "Pack Outlet Temp (¬∞C)",
        "Fan Speed (rpm)",
        "Temp Deviation (¬∞C)",
        "Valve Position (%)",
        "Bleed Air Pressure (psi)",
        "dTemp",
        "Temp_MA10",
        "Valve_range_10"
    ]
    
    # *** –ù–û–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç ***
    # –≠—Ç–æ –∫—Ä–∞–π–Ω–µ –≤–∞–∂–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–µ–π –∏ SHAP, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ—à–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö.
    for col in features:
        if col in df.columns: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç, –æ—à–∏–±–∫–∏ (–Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è) –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–Ω—É—Ç NaN
            df[col] = pd.to_numeric(df[col], errors='coerce')
    
    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ NaN –Ω—É–ª—è–º–∏ –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è. –≠—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∫ –∏—Å—Ö–æ–¥–Ω—ã–µ NaN, —Ç–∞–∫ –∏ NaN –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.
    X = df[features].fillna(0) 

    y = df["Failure in 10h"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    if y.nunique() < 2:
        status = "üî¥ –û—à–∏–±–∫–∞: –¶–µ–ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ 'Failure in 10h' —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–Ω–µ–µ –¥–≤—É—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. " \
                 "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å –∫–∞–∫ –æ—Ç–∫–∞–∑—ã, —Ç–∞–∫ –∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ."
        return pd.DataFrame(), plt.figure(), plt.figure(), plt.figure(), status, plt.figure()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è train_test_split –ø–æ—Å–ª–µ —Å—Ç—Ä–∞—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    unique_classes, counts = y.value_counts().index, y.value_counts().values
    if any(count < 2 for count in counts):
         status = "üî¥ –û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—ç–º–ø–ª–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ –∫–ª–∞—Å—Å–æ–≤ –≤ –∫–æ–ª–æ–Ω–∫–µ 'Failure in 10h' " \
                  "–¥–ª—è —Å—Ç—Ä–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –º–µ–Ω–µ–µ 2 –∑–∞–ø–∏—Å–µ–π."
         return pd.DataFrame(), plt.figure(), plt.figure(), plt.figure(), status, plt.figure()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ X –∏ y
    if len(X) != len(y):
        status = "üî¥ –û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö (X) –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (y) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. " \
                 "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö."
        return pd.DataFrame(), plt.figure(), plt.figure(), plt.figure(), status, plt.figure()

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, stratify=y, random_state=42
    )

    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ RandomForestClassifier
    model = RandomForestClassifier(
        n_estimators=200,
        max_depth=6,
        class_weight='balanced_subsample',
        random_state=42
    )
    model.fit(X_train, y_train)

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
    y_pred = model.predict(X_test)
    y_proba = model.predict_proba(X_test)[:, 1]
    roc_auc = roc_auc_score(y_test, y_proba) 
    fpr, tpr, _ = roc_curve(y_test, y_proba)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ ROC-–∫—Ä–∏–≤–æ–π
    fig_roc, ax_roc = plt.subplots(figsize=(8, 6))
    ax_roc.plot(fpr, tpr, label=f"AUC = {roc_auc:.2f}")
    ax_roc.plot([0, 1], [0, 1], linestyle="--", color="gray", alpha=0.7)
    ax_roc.set_title("ROC-–∫—Ä–∏–≤–∞—è", fontsize=14)
    ax_roc.set_xlabel("False Positive Rate", fontsize=12)
    ax_roc.set_ylabel("True Positive Rate", fontsize=12)
    ax_roc.legend(fontsize=10)
    ax_roc.grid(True, linestyle='--', alpha=0.6)
    fig_roc.tight_layout() 

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ SHAP-–≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    explainer = shap.TreeExplainer(model)
    shap_values = explainer.shap_values(X_test) 
    
    # *** –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ X_test –¥–ª—è SHAP –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ –ø–æ—Ä—è–¥–æ–∫ ***
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DataFrame –∏–∑ X_test —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ 'features'
    # –≠—Ç–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ –≤ shap.summary_plot
    X_test_for_shap_plot = pd.DataFrame(X_test, columns=features)
    
    shap.summary_plot(shap_values[1], X_test_for_shap_plot, plot_type="bar", show=False)
    fig_shap = plt.gcf() # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∏–≥—É—Ä—É Matplotlib, —Å–æ–∑–¥–∞–Ω–Ω—É—é SHAP
    fig_shap.set_size_inches(10, 7) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∏–≥—É—Ä—ã
    fig_shap.tight_layout() # –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏
    plt.close(fig_shap) # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å —Å—Ä–∞–∑—É, –∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Streamlit

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω—ã–π DataFrame
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å, –æ–±—É—á–µ–Ω–Ω—É—é –Ω–∞ X, –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ –≤—Å–µ–º—É df
    df["Predicted Failure"] = model.predict(X)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã PACK —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –æ—Ç–∫–∞–∑–∞–º–∏
    fig_temp, ax2 = plt.subplots(figsize=(12, 6))
    ax2.plot(df["Pack Outlet Temp (¬∞C)"].reset_index(drop=True), label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ PACK", color="blue", linewidth=1.5)
    ax2.scatter(df[df["Predicted Failure"] == 1].index,
                df.loc[df["Predicted Failure"] == 1, "Pack Outlet Temp (¬∞C)"],
                color="red", label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω –æ—Ç–∫–∞–∑", s=50, zorder=5, alpha=0.7) 
    ax2.set_title("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ PACK —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –æ—Ç–∫–∞–∑–∞–º–∏", fontsize=14)
    ax2.set_xlabel("–¢–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö", fontsize=12)
    ax2.set_ylabel("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ PACK (¬∞C)", fontsize=12)
    ax2.grid(True, linestyle='--', alpha=0.6)
    ax2.legend(fontsize=10)
    fig_temp.tight_layout()

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã PACK —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –æ—Ç–∫–∞–∑–∞–º–∏
    fig_dtemp, ax3 = plt.subplots(figsize=(12, 6))
    ax3.plot(df["dTemp"].reset_index(drop=True), label="–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (dTemp)", color="orange", linewidth=1.5)
    ax3.scatter(df[df["Predicted Failure"] == 1].index,
                df.loc[df["Predicted Failure"] == 1, "dTemp"],
                color="red", label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω –æ—Ç–∫–∞–∑", s=50, zorder=5, alpha=0.7)
    ax3.set_title("–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã PACK —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –æ—Ç–∫–∞–∑–∞–º–∏", fontsize=14)
    ax3.set_xlabel("–¢–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö", fontsize=12)
    ax3.set_ylabel("dTemp (¬∞C/—Ç–æ—á–∫–∞)", fontsize=12)
    ax3.grid(True, linestyle='--', alpha=0.6)
    ax3.legend(fontsize=10)
    fig_dtemp.tight_layout()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è
    total_failures = df["Predicted Failure"].sum()
    max_dtemp = df["dTemp"].abs().max()
    dtemp_threshold = 3

    if total_failures > 3:
        status = "üî¥ –ù–µ–æ–±—Ö–æ–¥–∏–º —Ä–µ–º–æ–Ω—Ç –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä."
    elif total_failures > 0 or max_dtemp > dtemp_threshold:
        status = "üü° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å–∏—Å—Ç–µ–º–æ–π."
    else:
        status = "üü¢ –°–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ."

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å Streamlit)
    try:
        print(classification_report(y_test, y_pred, zero_division=0))
        print("ROC-AUC:", roc_auc_score(y_test, y_proba))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –æ—Ç—á–µ—Ç–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ ROC-AUC: {e}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π DataFrame, –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Ñ–∏–≥—É—Ä Matplotlib –∏ —Å—Ç–∞—Ç—É—Å
    return df, fig_roc, fig_temp, fig_dtemp, status, fig_shap

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π DataFrame, –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Ñ–∏–≥—É—Ä Matplotlib –∏ —Å—Ç–∞—Ç—É—Å
    return df, fig_roc, fig_temp, fig_dtemp, status, fig_shap


