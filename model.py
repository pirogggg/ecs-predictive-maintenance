# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SHAP (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
!pip install shap

# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import pandas as pd
import numpy as np
import shap
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, roc_auc_score, roc_curve

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_excel("ecs_data.xlsx")

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
df["dTemp"] = df["Pack Outlet Temp (√Ç¬∞C)"].diff().fillna(0)
df["Temp_MA10"] = df["Pack Outlet Temp (√Ç¬∞C)"].rolling(window=10).mean().fillna(method="bfill")
df["Valve_range_10"] = df["Valve Position (%)"].rolling(window=10).apply(lambda x: max(x) - min(x)).fillna(0)

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
features = [
    "Pack Outlet Temp (√Ç¬∞C)", "Fan Speed (rpm)", "Temp Deviation (√Ç¬∞C)",
    "Valve Position (%)", "Bleed Air Pressure (psi)",
    "dTemp", "Temp_MA10", "Valve_range_10"
]
X = df[features]
y = df["Failure in 10h"]

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
model = RandomForestClassifier(
    n_estimators=200,
    max_depth=6,
    class_weight='balanced_subsample',
    random_state=42
)
model.fit(X_train, y_train)

# –ú–µ—Ç—Ä–∏–∫–∏
y_pred = model.predict(X_test)
y_proba = model.predict_proba(X_test)[:, 1]
print(classification_report(y_test, y_pred))
print("ROC-AUC:", roc_auc_score(y_test, y_proba))

# ROC-–∫—Ä–∏–≤–∞—è
fpr, tpr, _ = roc_curve(y_test, y_proba)
plt.figure(figsize=(7,5))
plt.plot(fpr, tpr, label=f"ROC Curve (AUC = {roc_auc_score(y_test, y_proba):.2f})")
plt.plot([0,1], [0,1], linestyle="--", color="gray")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC-–∫—Ä–∏–≤–∞—è –º–æ–¥–µ–ª–∏")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

# SHAP-–∞–Ω–∞–ª–∏–∑
# Explicitly pass training data to the explainer
explainer = shap.TreeExplainer(model, data=X_train)
shap_values = explainer.shap_values(X_test)

# Correct slicing for multi-class output and plotting with feature names
# Ensure shap_values has the correct shape (n_samples, n_features, n_classes)
# and select the slice for the positive class (index 1) across all samples and features.
# If the explainer still outputs with 5 features, there might be an issue with how
# the explainer handles models trained on transformed data.
# Let's try slicing based on the expected output for a multi-class classifier with 2 classes.
if isinstance(shap_values, list):
    # For multi-output models, shap_values is a list of arrays.
    # Assuming it's a list with two arrays, one for each class.
    # We need the array for the positive class (index 1).
    if len(shap_values) > 1:
        shap_values_positive_class = shap_values[1]
    else:
        # If it's a single output (regression or binary with single output array)
        shap_values_positive_class = shap_values[0] # Or handle as appropriate
else:
    # For single output models, shap_values is a single array.
    # For binary classification, this array might be (n_samples, n_features)
    # or (n_samples, n_features, 2).
    if shap_values.ndim == 3 and shap_values.shape[2] == 2:
         # If shape is (n_samples, n_features, 2), slice for the positive class
        shap_values_positive_class = shap_values[:, :, 1]
    elif shap_values.ndim == 2:
        # If shape is (n_samples, n_features) for binary classification
        shap_values_positive_class = shap_values
    else:
        # Handle other unexpected shapes
        print(f"Unexpected shap_values shape: {shap_values.shape}")
        shap_values_positive_class = None # Or raise an error

if shap_values_positive_class is not None:
    # Ensure the number of features in shap_values_positive_class matches X_test
    if shap_values_positive_class.shape[1] == X_test.shape[1]:
        shap.summary_plot(shap_values_positive_class, X_test, plot_type="bar", feature_names=features)
    else:
        print(f"Shape mismatch after slicing: shap_values_positive_class.shape={shap_values_positive_class.shape}, X_test.shape={X_test.shape}")
        # Fallback: try plotting with the sliced shap_values and X_test.values if shapes match after slicing
        if shap_values_positive_class.shape == X_test.values.shape:
             shap.summary_plot(shap_values_positive_class, X_test.values, plot_type="bar", feature_names=features)
        else:
             print("Cannot plot SHAP summary due to unresolvable shape mismatch.")


# –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
df["Predicted Failure"] = model.predict(X)

plt.figure(figsize=(12, 5))
plt.plot(df["Pack Outlet Temp (√Ç¬∞C)"].reset_index(drop=True), label="PACK Temp", color="blue")
plt.scatter(
    df[df["Predicted Failure"] == 1].index,
    df.loc[df["Predicted Failure"] == 1, "Pack Outlet Temp (√Ç¬∞C)"],
    color="red", label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω –æ—Ç–∫–∞–∑", s=30
)
plt.title("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ PACK —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –æ—Ç–∫–∞–∑–∞–º–∏")
plt.xlabel("–ò–Ω–¥–µ–∫—Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏")
plt.ylabel("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è dTemp —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
plt.figure(figsize=(12, 5))
plt.plot(df["dTemp"].reset_index(drop=True), label="d(PACK Temp)/dt", color="orange")
plt.scatter(
    df[df["Predicted Failure"] == 1].index,
    df.loc[df["Predicted Failure"] == 1, "dTemp"],
    color="red", label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω –æ—Ç–∫–∞–∑", s=30
)
plt.title("–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã PACK –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç–∫–∞–∑–æ–≤")
plt.xlabel("–ò–Ω–¥–µ–∫—Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏")
plt.ylabel("dTemp (¬∞C/min)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
# ------------------------------
# –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –º–æ–¥–µ–ª–∏
# ------------------------------

# –£—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
total_failures = df["Predicted Failure"].sum()
max_dtemp = df["dTemp"].abs().max()

# –ü–æ—Ä–æ–≥ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è dTemp
dtemp_threshold = 3  # ¬∞C –∑–∞ 5 —Å–µ–∫, –ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏

# –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
if total_failures > 3:
    print("üî¥ –í—ã–≤–æ–¥: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∫–∞–∑–∞.")
    print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ù–µ–æ–±—Ö–æ–¥–∏–º —Ä–µ–º–æ–Ω—Ç –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä.")
elif total_failures > 0 or max_dtemp > dtemp_threshold:
    print("üü° –í—ã–≤–æ–¥: –ò–º–µ—é—Ç—Å—è –µ–¥–∏–Ω–∏—á–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ –∏–ª–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.")
    print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å–∏—Å—Ç–µ–º–æ–π.")
else:
    print("üü¢ –í—ã–≤–æ–¥: –°–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.")
    print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.")
